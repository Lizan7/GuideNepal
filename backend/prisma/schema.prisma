// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  name             String?        @db.VarChar(255)
  email            String         @unique(map: "email") @db.VarChar(255)
  password         String
  role             Role
  guides           Guide[]
  hotels           Hotel[]
  bookings         UserBooking[]
  hotelBookings    HotelBooking[]
  friends          User[]         @relation("UserFriends")
  Message          Message[]      @relation("Sender")
  receivedMessages Message[]      @relation("Receiver")
  User             User[]         @relation("UserFriends")
  Requestfrom      Request[]      @relation("RequestFrom")
  Requestuser      Request[]      @relation("RequestUser")
  ratings          Rating[]       // Relation to ratings submitted by this user
}

model Guide {
  id                Int           @id @default(autoincrement())
  userId            Int           @unique
  user              User          @relation(fields: [userId], references: [id])
  email             String
  name              String?       @db.VarChar(255)
  phoneNumber       String
  location          String
  specialization    String
  isVerified        Boolean
  profileImage      String?       @db.LongText
  verificationImage String?       @db.LongText
  createdAt         DateTime      @default(now())
  bookings          UserBooking[]
  ratings           Rating[]      // Relation to ratings for this guide
  charge            Float
}

enum Role {
  ADMIN
  USER
  GUIDE
  HOTEL
}

model Hotel {
  id             Int            @id @default(autoincrement())
  name           String
  email          String
  phoneNumber    String
  location       String
  price          Float
  itineraries    String
  roomsAvailable Int
  isVerified     Boolean
  profileImage   String?
  certificate    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         Int            @unique
  user           User           @relation(fields: [userId], references: [id])
  hotelBookings  HotelBooking[]
  ratings        Rating[]       // Relation to ratings for this hotel
}

model UserBooking {
  id            Int       @id @default(autoincrement())
  userId        Int
  guideId       Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guide         Guide     @relation(fields: [guideId], references: [id], onDelete: Cascade)
  startDate     DateTime?
  endDate       DateTime?
  paymentStatus Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

model HotelBooking {
  id            Int      @id @default(autoincrement())
  userId        Int
  hotelId       Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  startDate     DateTime
  endDate       DateTime
  rooms         Int
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Request {
  id        Int      @id @default(autoincrement())
  fromId    Int
  from      User     @relation("RequestFrom", fields: [fromId], references: [id])
  message   String
  status    status   @default(pending)
  userId    Int
  user      User     @relation("RequestUser", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  message    String?
  timeStamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum status {
  pending
  accepted
  rejected
}

// Ratings model for hotels and guides
model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  userName  String   @db.VarChar(255)
  rating    Int
  review    String   @db.VarChar(1024)
  hotelId   Int?     // Provide if rating a hotel
  guideId   Int?     // Provide if rating a guide
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User  @relation(fields: [userId], references: [id])
  hotel  Hotel? @relation(fields: [hotelId], references: [id])
  guide  Guide? @relation(fields: [guideId], references: [id])
}
