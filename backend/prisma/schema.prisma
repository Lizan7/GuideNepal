// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(255)
  email    String  @unique(map: "email") @db.VarChar(255)
  password String
  role     Role
  guides   Guide[] // One-to-One or One-to-Many relationship
  hotels   Hotel[]
  bookings UserBooking[]
}

model Guide {
  id                Int    @id @default(autoincrement())
  userId            Int    @unique
  user              User   @relation(fields: [userId], references: [id])
  email             String
  phoneNumber       String
  location          String
  specialization    String
  isVerified        Boolean
  profileImage      String? @db.LongText
  verificationImage String? @db.LongText
  createdAt         DateTime @default(now())
  bookings          UserBooking[]
}


enum Role {
  ADMIN
  USER
  GUIDE
  HOTEL
}

model Hotel {
  id                Int    @id @default(autoincrement())
  userId            Int    @unique
  user              User   @relation(fields: [userId], references: [id])
  hotelphoneNumber       String
  hotelLocation          String
  Rooms             Int
  profileImage      String? @db.LongText
  verificationImage String? @db.LongText
  createdAt         DateTime @default(now())
}


model UserBooking {
  id            Int      @id @default(autoincrement())
  userId        Int
  guideId       Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guide         Guide    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  bookingDate   DateTime @default(now())
  paymentStatus Boolean  @default(false)

  createdAt     DateTime @default(now())
}